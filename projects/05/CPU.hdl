// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    PC(load=jt,in=a,reset=reset,inc=true,out[0..14]=pc);
    And(a=instruction[15], b=j, out=jt);
    Or3Way(a=jl, b=je, c=jg, out=j);
    And(a=instruction[0], b=gt, out=jg);
    And(a=instruction[1], b=e, out=je);
    And(a=instruction[2], b=lt, out=jl);
    Not(in=le, out=gt);
    Or(a=lt, b=e, out=le);
    ARegister(in=ain, out=a, load=loada, out[0..14]=addressM);
    Or(a=ainstruction, b=storea, out=loada);
    Not(in=instruction[15], out=ainstruction);
    Mux16(a[0..14]=instruction[0..14], b=alu, sel=instruction[15], out=ain);
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=instruction[15], out=loadd);
    And(a=instruction[5], b=instruction[15], out=storea);
    Mux16(a=a, b=inM, sel=instruction[12], out=am);
    ALU(y=am, x=d, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu, zr=e, ng=lt, out=outM);
    DRegister(in=alu, out=d, load=loadd);
}
